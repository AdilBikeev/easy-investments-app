// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quotation.Infrastructure;

#nullable disable

namespace Quotation.Infrastructure.Migrations
{
    [DbContext(typeof(QuotationContext))]
    [Migration("20220308172800_Initial_AddForeignKeyQuotation_v0.0.2")]
    partial class Initial_AddForeignKeyQuotation_v002
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("quotationprofitseq", "quotation")
                .IncrementsBy(10);

            modelBuilder.HasSequence("quotationseq", "quotation")
                .IncrementsBy(10);

            modelBuilder.Entity("Quotation.Domain.AggregatesModel.QuotationAggregate.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "quotationseq", "quotation");

                    b.Property<string>("FIGI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "FIGI", "Ticker");

                    b.ToTable("Quotation", "quotation");
                });

            modelBuilder.Entity("Quotation.Domain.AggregatesModel.QuotationProfitAggregate.QuotationProfit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "quotationprofitseq", "quotation");

                    b.Property<int>("CountBuyQuotationPossible")
                        .HasColumnType("integer");

                    b.Property<decimal>("InvestedAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PayoutAvg")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PayoutsYieldAvg")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PossibleProfitSpeculation")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceAvg")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityPaymentsAvg")
                        .HasColumnType("numeric");

                    b.Property<int>("QuotationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId")
                        .IsUnique();

                    b.ToTable("QuotationProfit", "quotation");
                });

            modelBuilder.Entity("Quotation.Domain.AggregatesModel.QuotationProfitAggregate.QuotationProfit", b =>
                {
                    b.HasOne("Quotation.Domain.AggregatesModel.QuotationAggregate.Quotation", "Quotation")
                        .WithOne("QuotationProfit")
                        .HasForeignKey("Quotation.Domain.AggregatesModel.QuotationProfitAggregate.QuotationProfit", "QuotationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("Quotation.Domain.AggregatesModel.QuotationAggregate.Quotation", b =>
                {
                    b.Navigation("QuotationProfit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
